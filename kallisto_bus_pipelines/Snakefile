'''
kallisto.bustools.snakefile
Joseph Mears

Quantify transcript expression in paired-end scRNA-seq data with kallisto bustools
----------------------------------------------------------------------------------

Requirements:

  kallisto
      https://pachterlab.github.io/kallisto/download.html

Usage: 

  snakemake --jobs 999 --cluster 'bsub.py -o stdout'
'''

import json
from os.path import join, basename, dirname
from os import getcwd
from subprocess import check_output
from itertools import chain

# Globals ---------------------------------------------------------------------

# Full path to an compressed FASTA file with all chromosome sequences.
CDNA = '/data/srlab1/jmears/Inflamed_Integration/alignment/reference/Homo_sapiens.GRCh38.cdna.ncrna.fa.gz'

# Full path to index
INDEX = '/data/srlab1/jmears/Inflamed_Integration/alignment/reference/human_transcriptome_GRCh38_v100.idx'

# Full path to whitelist
WHITELIST = '/data/srlab1/jmears/Inflamed_Integration/alignment/reference/whitelist_celseq2.txt'

# Full path to transcript_to_gene files
T2G = '/data/srlab1/jmears/Inflamed_Integration/alignment/reference/transcripts_to_genes_hgnc.txt'

# Full path to a folder where intermediate output files will be created.
OUT_DIR = join(getcwd(), 'kallisto-bus/output')

# Samples and their corresponding filenames.
FILES = json.load(open('/data/srlab1/jmears/Inflamed_Integration/alignment/samples.json'))
SAMPLES = sorted(FILES.keys())

KALLISTO_VERSION = check_output("echo $(kallisto)", shell=True)

# Functions -------------------------------------------------------------------

def rstrip(text, suffix):
    # Remove a suffix from a string.
    if not text.endswith(suffix):
        return text
    return text[:len(text)-len(suffix)]

# Rules -----------------------------------------------------------------------

rule all:
    input:
        expand(join(OUT_DIR, '{sample}', 'counts_unfiltered/cells_x_genes.mtx'), sample=SAMPLES)

#rule kallisto_index:
#    input:
#        cdna = CDNA
#    output:
#        index = join(dirname(CDNA), 'kallisto', rstrip(basename(CDNA), '.fa.gz'))
#    log:
#        join(dirname(CDNA), 'kallisto/kallisto.index.log')
#    benchmark:
#        join(dirname(CDNA), 'kallisto/kallisto.index.benchmark.tsv')
#    version:
#        KALLISTO_VERSION
#    run:
#        # Record the kallisto version number in the log file.
#        shell('echo $(kallisto index) &> {log}')
#        # Write stderr and stdout to the log file.
#        shell('kallisto index'
#              ' --index={output.index}'
#              ' --kmer-size=21'
#              ' --make-unique'
#              ' {input.cdna}'
#              ' >> {log} 2>&1')

rule kallisto_count:
    input:
        r1 = lambda wildcards: FILES[wildcards.sample]['R1'],
        r2 = lambda wildcards: FILES[wildcards.sample]['R2'],
        index = INDEX,
        t2g = T2G
    output:
        join(OUT_DIR, '{sample}', 'counts_unfiltered/cells_x_genes.mtx'),
    benchmark:
        join(OUT_DIR, '{sample}', 'kallisto.quant.benchmark.tsv')
    version:
        KALLISTO_VERSION
    threads:
        4
    resources:
        mem = 4000
    run:
        fastqs = ' '.join(chain.from_iterable(zip(input.r1, input.r2)))
        shell('kb count'
              ' -t {threads}'
              ' -i {input.index}'
              ' -x CELSEQ2'
              ' -g {input.t2g}'
              ' -o ' + join(OUT_DIR, '{wildcards.sample}') +
              ' ' + fastqs)

#rule kallisto_bus:
#    input:
#        r1 = lambda wildcards: FILES[wildcards.sample]['R1'],
#        r2 = lambda wildcards: FILES[wildcards.sample]['R2'],
#        index = INDEX
#    output:
#        join(OUT_DIR, '{sample}', 'output.bus'),
#    benchmark:
#        join(OUT_DIR, '{sample}', 'kallisto.quant.benchmark.tsv')
#    version:
#        KALLISTO_VERSION
#    threads:
#        4
#    resources:
#        mem = 4000
#    run:
#        fastqs = ' '.join(chain.from_iterable(zip(input.r1, input.r2)))
#        shell('kallisto bus'
#              ' --threads={threads}'
#              ' --index={input.index}'
#              ' --technology=0,6,12:0,0,6:1,0,0'
#              ' --output-dir=' + join(OUT_DIR, '{wildcards.sample}') +
#              ' ' + fastqs)
#
#rule kallisto_whitelist:
#    input:
#        busfiles = expand(join(OUT_DIR, '{sample}', 'output.bus'), sample=SAMPLES),
#        whitelist = WHITELIST
#    output:
#        join(OUT_DIR, '{sample}', 'output.correct.bus'),
#    benchmark:
#        join(OUT_DIR, '{sample}', 'kallisto.quant.benchmark.tsv')
#    version:
#        KALLISTO_VERSION
#    threads:
#        4
#    resources:
#        mem = 4000
#    run:
#        shell('bustools correct'
#              ' --threads={threads}'
#              ' --whitelist={input.whitelist}'
#              ' --output=' + join(OUT_DIR, '{wildcards.sample}', 'output.correct.bus') +
#              ' {input.busfiles}' )
#
#rule kallisto_sort:
#    input:
#        correctedbusfiles = expand(join(OUT_DIR, '{sample}', 'output.correct.bus'), sample=SAMPLES)
#    output:
#        join(OUT_DIR, '{sample}', 'output.correct.sorted.bus'),
#    benchmark:
#        join(OUT_DIR, '{sample}', 'kallisto.quant.benchmark.tsv')
#    version:
#        KALLISTO_VERSION
#    threads:
#        4
#    resources:
#        mem = 4000
#    run:
#        shell('bustools sort'
#              ' --threads={threads}'
#              ' --output=' + join(OUT_DIR, '{wildcards.sample}', 'output.correct.sorted.bus') +
#              ' {input.correctedbusfiles}' )
#
#rule kallisto_count:
#    input:
#        sortedbusfiles = expand(join(OUT_DIR, '{sample}', 'output.correct.sorted.bus'), sample=SAMPLES),
#        t2g = T2G
#    output:
#        join(OUT_DIR, '{sample}', 'output.gene.mtx'),
#    benchmark:
#        join(OUT_DIR, '{sample}', 'kallisto.quant.benchmark.tsv')
#    version:
#        KALLISTO_VERSION
#    threads:
#        4
#    resources:
#        mem = 4000
#    run:
#        shell('bustools count'
#              ' --threads={threads}'
#              ' --genemap={input.t2g}'
#              ' --genecounts'
#              ' --output=' + join(OUT_DIR, '{wildcards.sample}', 'output.gene') +
#              ' {input.sortedbusfiles}' )
#
#rule collate_kallisto:
#    input:
#       expand(join(OUT_DIR, '{sample}', 'abundance.tsv'), sample=SAMPLES)
#    output:
#        'abundance.tsv.gz'
#    run:
#        import gzip
#
#        b = lambda x: bytes(x, 'UTF8')
#
#        # Create the output file.
#        with gzip.open(output[0], 'wb') as out:
#
#            # Print the header.
#            header = open(input[0]).readline()
#            out.write(b('sample\t' + header))
#
#            for i in input:
#                sample = basename(dirname(i))
#                lines = open(i)
#                # Skip the header in each file.
#                lines.readline()
#                for line in lines:
#                    # Skip transcripts with 0 TPM.
#                    fields = line.strip().split('\t')
#                    if float(fields[4]) > 0:
#                        out.write(b(sample + '\t' + line))
#
#rule n_processed:
#    input:
#        expand(join(OUT_DIR, '{sample}', 'run_info.json'), sample=SAMPLES)
#    output:
#        'n_processed.tsv.gz'
#    run:
#        import json
#        import gzip
#
#        b = lambda x: bytes(x, 'UTF8')
#
#        with gzip.open(output[0], 'wb') as out:
#            out.write(b('sample\tn_processed\n'))
#
#            for f in input:
#                sample = basename(dirname(f))
#                n = json.load(open(f)).get('n_processed')
#                out.write(b('{}\t{}\n'.format(sample, n)))
#
